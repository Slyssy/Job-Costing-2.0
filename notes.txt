Created app copy.py --- back up to review changes made
Need to refactor code -- use sqlalchemy 
    -- starting with new user route and then login route
Figure out hashing once sqlalchemy works

In ddSort branch:
- updated SQL query for new_time route to sort the User name and project names 
alphabetical order (ascending)


enterExpensejs

// var expenseType = exp_dropdown_dict.expense_list.map((d) => d.expense);
// var expEle = document.getElementById("expense");
// for (let i = 0; i < expenseType.length; i++) {
//   var opt = expenseType[i];

//   var el = document.createElement("option");
//   el.text = opt;
//   el.value = opt;

//   expEle.add(expEl);
// }


enter_expense route:
used the following code to test grabbing expenses from db
#attempt at db expenses:
        cur = conn.cursor()
        cur.execute('SELECT * FROM expenses')    
        expenses_fetch = cur.fetchall()
        print('-----------------------------------------------------------') 
        print(expenses_fetch)
        print('-----------------------------------------------------------') 

        mat_exp_list = []
        subcon_exp_list = []
        misc_exp_list = []
        for db_row in expenses_fetch:
            mat_exp_dict = {}
            subcon_exp_dict = {}
            misc_exp_dict = {}
            if db_row[1] == "Materials":
                mat_exp_dict['exp_type'] = db_row[1]
                mat_exp_dict['project_id'] = db_row[2]
                mat_exp_dict['expense_amount'] = db_row[4]
                mat_exp_list.append(mat_exp_dict)
            elif db_row[1] == "Subcontractor":
                subcon_exp_dict['exp_type'] = db_row[1]
                subcon_exp_dict['project_id'] = db_row[2]
                subcon_exp_dict['expense_amount'] = db_row[4]
                subcon_exp_list.append(subcon_exp_dict)
            else:
                misc_exp_dict['exp_type'] = db_row[1]
                misc_exp_dict['project_id'] = db_row[2]
                misc_exp_dict['expense_amount'] = db_row[4]
                misc_exp_list.append(misc_exp_dict)

        #newstuff on saturday
        #putting expense values in list 
        mat_values_list = []
        for dict_row in mat_exp_list:
            mat_values = dict_row['expense_amount']
            mat_values_list.append(mat_values)
        
        subcon_values_list = []
        for dict_row in subcon_exp_list:
            subcon_values = dict_row['expense_amount']
            subcon_values_list.append(subcon_values)
        
        misc_exp_list = []
        for dict_row in mat_exp_list:
            misc_values = dict_row['expense_amount']
            misc_exp_list.append(misc_values)

        #expense totals
        total_materials_exp = round((sum(mat_values_list)),2)
        total_subcontractor_exp = round((sum(subcon_values_list)),2)
        total_miscellaneous_exp = round((sum(misc_exp_list)),2)
        # total_subcontractor_exp = sum(list_subcon_values)
        # total_miscellaneous_exp = sum(list_misc_values)


        # print(exp_dict)
        print('-----------------------------------------------------------') 
        print(mat_exp_list)
        print('-----------------------------------------------------------') 
        print(mat_values_list)
        print(f'this is the total materials value {total_materials_exp}')
        print('-----------------------------------------------------------')
        print(subcon_exp_list)
        print(f'this is the total subcontractor value {total_subcontractor_exp}')
        print('-----------------------------------------------------------') 
        print(misc_exp_list)
        print(f'this is the total misc value {total_miscellaneous_exp}')
        print('-----------------------------------------------------------')

        # mat_df = pd.DataFrame(mat_exp_list) 
        # subcon_df = pd.DataFrame(subcon_exp_list)
        # misc_df = pd.DataFrame(misc_exp_list)


        # print("Dataframes")
        # print(mat_df)
        # print(subcon_df)
        # print(misc_df)
        # print('-----------------------------------------------------------')
        # mat_df_values = mat_df['expense_amount'].values
        # subcon_df_values = subcon_df['expense_amount'].values
        # misc_df_values = misc_df['expense_amount'].values
        
        # b = np.sum(a)
        # list_mat_values = mat_df_values.tolist()
        # list_subcon_values = subcon_df_values.tolist()
        # list_misc_values = misc_df_values.tolist()

        # total_mat_exp = sum(list_mat_values)
        # total_subcon_exp = sum(list_subcon_values)
        # total_misc_exp = sum(list_misc_values)
        # for mat_exp in a:
        #     a[0] += a[0]

       
        # print('-----------------------------------------------------------')
        # print("printing a - the values of mat_df expense amount column")
        # print(mat_df_values)
        # print('-----------------------------------------------------------')
        # print("type of a")
        # print(type(mat_df_values))
        # print('-----------------------------------------------------------')
        # # print(mat_exp)
        # # print((b))
        # print(total_mat_exp)
        # print(total_subcon_exp)
        # print(total_misc_exp)

        required=""

Thoughts on updating new_project route to calculate the overhead expense to save to db using revenue input and oh RATE input:

        #We have the revenue:
        revenue = str("{:.2f}".format(float(request.form['revenue'])))
        full_values_string += ',' + revenue

        #... whole bunch of other data in between....

        #the estimated lbaor expense calculation:
        est_labor_expense = str("{:.2f}".format(float(est_labor_hours) * float(est_labor_rate)))

        we need to add the est_oh_rate & oh_expense:        
        est_overhead_rate = request.form['est_overhead_expense']
        est_overhead_expense = str("{:.2f}".format(float(request.form['revenue']))) * float(est_labor_rate)))
        full_values_string += ',' + est_over_expense

        est_labor_rate = str("{:.2f}".format(float(request.form['est_labor_rate'])))

Missing code in app.py :
new_project page from project 2 app.py
full_values_string += ',' + est_labor_expense
        if 'act_start_date' in request.form and request.form['act_start_date'] != "":
            act_start_date = datetime.datetime.strptime(request.form['act_start_date'], '%m/%d/%Y').date()
        else:
            act_start_date = datetime.datetime.now()           
        full_values_string += ',' + "'" + str(act_start_date) + "'" + ')'


CURRENT in PRO 3 (not right):
full_values_string += ',' + est_labor_expense
        if 'act_start_date' in request.form and request.form['act_start_date'] != "":
            act_start_date = datetime.datetime.strptime(request.form['act_start_date'], '%m/%d/%Y').date()
        else:
            act_start_date = datetime.datetime.now()